# -*- mode: ruby -*-
# vi: set ft=ruby :

cluster = {
  "k8s-master1" => { :ip => "10.0.7.101", :disk => "./disk/k8s-master1.vdi", :mem => 2048 },
  "k8s-master2" => { :ip => "10.0.7.102", :disk => "./disk/k8s-master2.vdi", :mem => 2048 },
  "k8s-master3" => { :ip => "10.0.7.103", :disk => "./disk/k8s-master3.vdi", :mem => 2048 },
  "k8s-node1" => { :ip => "10.0.7.104", :disk => "./disk/k8s-node1.vdi", :mem => 16384 },
}

Vagrant.configure("2") do |config|
  config.vm.box = 'centos/7'
  #config.ssh.username = 'root'
  #config.ssh.password = 'vagrant'
  #config.ssh.insert_key = false
  config.hostmanager.enabled = true
  config.hostmanager.manage_host = true
  config.hostmanager.manage_guest = true
  config.hostmanager.ignore_private_ip = false
  config.hostmanager.include_offline = true
  config.vm.box_check_update = false 
  config.vm.provider "virtualbox" do |v|
    v.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
    #v.customize ["modifyvm", :id, '--natdnshostresolver1', 'on']
    #v.memory = 2048
    v.cpus = 2
  end

  cluster.each_with_index do |(hostname, info), index|
    config.vm.define hostname do |cfg|
      cfg.vm.provider :virtualbox do |vb, override|
        override.vm.network :private_network, ip: "#{info[:ip]}"
        override.vm.hostname = hostname
        vb.name = hostname
        if !File.exist?(info[:disk])
          vb.customize ['createhd', '--filename', info[:disk], '--size', 100 * 1024]
        end
        vb.customize ['storageattach', :id, '--storagectl', 'IDE', '--port', 1, '--device', 0, '--type', 'hdd', '--medium', info[:disk]]
        vb.customize ["modifyvm", :id, "--memory", info[:mem], "--hwvirtex", "on"]
      end # end provider
    end # end config
  end # end cluster

  config.vm.provision "shell", inline: <<-SHELL
    #设置 root 密码，随自己习惯
    sed  -i 's@^PasswordAuthentication no@PasswordAuthentication yes@g' /etc/ssh/sshd_config
    systemctl restart sshd
    echo "root"|passwd --stdin root
    #安装常用软件，ipvsadm 使用 ipvs 模式时使用
    yum -y install wget
    wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo
    wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo
    yum -y install vim net-tools lrzsz bash-completion rsync sysstat git chrony tree yum-utils lsof zip unzip telnet nc ipvsadm
    sed -ri 's@^(SELINUX=).*@\1disabled@g' /etc/selinux/config
    #设置内核参数
    tee -a /etc/sysctl.d/kubernetes.conf << EOF
net.ipv4.ip_forward=1
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
fs.may_detach_mounts = 1
EOF

    sysctl --system

# 安装 docker
curl -sSL https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo >  /etc/yum.repos.d/docker-ce.repo
yum -y install docker-ce conntrack-tools
mkdir -p /etc/docker/

cat <<'EOF'> /etc/docker/daemon.json
{
  "registry-mirrors": ["https://fz5yth0r.mirror.aliyuncs.com"],
  "storage-driver": "overlay2",
  "storage-opts": [
    "overlay2.override_kernel_check=true"
  ],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m",
    "max-file": "3"
  }
}
EOF

    systemctl start docker
    systemctl enable docker
    usermod -G docker vagrant

#关闭swap分区
swapoff -a
sed -i 's@.*swap.*@#&@g' /etc/fstab

#选择需要开机加载的内核模块，以下是 ipvs 模式需要加载的模块
cat <<EOF> /etc/modules-load.d/ipvs.conf
#auto load ipvs
ip_vs
ip_vs
ip_vs_rr
ip_vs_wrr
ip_vs_sh
nf_conntrack_ipv4
EOF
#重新加载内核模块，这个 unit 文件是一次性的，每次设置完毕需要安装的模块，重新加载即可
systemctl start systemd-modules-load.service

#升级 4.4 内核，使用 ipvs
yum -y install http://mirrors.ustc.edu.cn/elrepo/kernel/el7/x86_64/RPMS/kernel-lt-4.4.143-1.el7.elrepo.x86_64.rpm
sed  -i 's@GRUB_DEFAULT=.*@GRUB_DEFAULT=0@' /etc/default/grub
grub2-mkconfig -o /boot/grub2/grub.cfg
reboot

echo "deploy done"
  SHELL
end
